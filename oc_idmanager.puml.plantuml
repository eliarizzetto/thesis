@startuml

!theme plain
top to bottom direction
skinparam linetype ortho

class IdentifierManager
class node3 as "validator.oc_idmanager.doi.DOIManager" {
   _data: 
   _isbnm: 
   _api_crossref: 
   _api_public: 
   _api_airiti: 
   _api_cnki: 
   _api_datacite: 
   _use_api_service: 
   _p: 
   _issnm: 
   _api_kisti: 
   _api_op: 
   _api: 
   _api_jalc: 
   _api_unknown: 
   _api_istic: 
   _api_medra: 
   _om: 
   __init__(self, data={}, use_api_service=True): 
   is_valid(self, id_string, get_extra_info=False): 
   normalise(self, id_string, include_prefix=False): 
   syntax_ok(self, id_string): 
   exists(self, doi_full, get_extra_info=False, allow_extra_api=None): 
}
class node8 as "validator.oc_idmanager.isbn.ISBNManager" {
   _data: 
   _p: 
   __init__(self, data={}): 
   is_valid(self, id_string, get_extra_info=False): 
   normalise(self, id_string, include_prefix=False): 
   check_digit(self, isbn): 
   syntax_ok(self, id_string): 
}
class node10 as "validator.oc_idmanager.issn.ISSNManager" {
   _data: 
   _p: 
   __init__(self, data={}): 
   is_valid(self, id_string, get_extra_info=False): 
   normalise(self, id_string, include_prefix=False): 
   syntax_ok(self, id_string): 
   check_digit(self,issn): 
}
class node11 as "validator.oc_idmanager.orcid.ORCIDManager" {
   _data: 
   _p: 
   _api: 
   _use_api_service: 
   __init__(self, data={}, use_api_service=True): 
   is_valid(self, id_string, get_extra_info=False): 
   normalise(self, id_string, include_prefix=False): 
   check_digit(self, orcid): 
   syntax_ok(self, id_string): 
   exists(self, orcid, get_extra_info=False, allow_extra_api=None): 
   extra_info(self, api_response, choose_api=None, info_dict={}): 
}
class node0 as "validator.oc_idmanager.pmcid.PMCIDManager" {
   _data: 
   _p: 
   _api: 
   _use_api_service: 
   __init__(self, data={}, use_api_service=True): 
   is_valid(self, pmcid, get_extra_info=False): 
   normalise(self, id_string, include_prefix=False): 
   syntax_ok(self, id_string): 
   exists(self, pmcid_full, get_extra_info=False, allow_extra_api=None): 
   extra_info(self, api_response, choose_api=None, info_dict={}): 
}
class node6 as "validator.oc_idmanager.pmid.PMIDManager" {
   _data: 
   _pmid_regex: 
   _im: 
   _issue_regex: 
   _type_regex: 
   _issn_regex: 
   _use_api_service: 
   _p: 
   _title_regex: 
   _volume_regex: 
   _author_regex: 
   _api: 
   _doi_regex: 
   _page_regex: 
   _date_regex: 
   _publisher_regex: 
   _journal_regex: 
   _editor_regex: 
   __init__(self, data={}, use_api_service=True): 
   is_valid(self, pmid, get_extra_info=False): 
   normalise(self, id_string, include_prefix=False): 
   syntax_ok(self, id_string): 
   exists(self, pmid_full, get_extra_info=False, allow_extra_api=None): 
   extra_info(self, api_response, choose_api=None, info_dict={}): 
}
class node4 as "validator.oc_idmanager.ror.RORManager" {
   _data: 
   _p: 
   _api: 
   _use_api_service: 
   __init__(self, data={}, use_api_service=True): 
   is_valid(self, ror_id, get_extra_info=False): 
   normalise(self, id_string, include_prefix=False): 
   syntax_ok(self, id_string): 
   exists(self, ror_id_full, get_extra_info=False, allow_extra_api=None): 
   extra_info(self, api_response, choose_api=None, info_dict={}): 
}
class node2 as "validator.oc_idmanager.url.URLManager" {
   _data: 
   _p: 
   _scheme_https: 
   _scheme_http: 
   _use_api_service: 
   __init__(self, data={}, use_api_service=True): 
   is_valid(self, url, get_extra_info=False): 
   normalise(self, id_string, include_prefix=False): 
   syntax_ok(self, id_string): 
   exists(self, url_full, get_extra_info=False, allow_extra_api=None): 
   extra_info(self, api_response, choose_api=None, info_dict={}): 
}
class node1 as "validator.oc_idmanager.viaf.VIAFManager" {
   _data: 
   _p: 
   _api: 
   _use_api_service: 
   __init__(self, data={}, use_api_service=True): 
   is_valid(self, viaf_id, get_extra_info=False): 
   normalise(self, id_string, include_prefix=False): 
   syntax_ok(self, id_string): 
   exists(self, viaf_id_full, get_extra_info=False, allow_extra_api=None): 
   extra_info(self, api_response, choose_api=None, info_dict={}): 
}
class node9 as "validator.oc_idmanager.wikidata.WikidataManager" {
   _data: 
   _p: 
   _api: 
   _use_api_service: 
   __init__(self, data={}, use_api_service=True): 
   is_valid(self, wikidata_id, get_extra_info=False): 
   normalise(self, id_string, include_prefix=False): 
   syntax_ok(self, id_string): 
   exists(self, wikidata_id_full, get_extra_info=False, allow_extra_api=None): 
   extra_info(self, api_response, choose_api=None, info_dict={}): 
}
class node5 as "validator.oc_idmanager.wikipedia.WikipediaManager" {
   _data: 
   _p: 
   _api: 
   _use_api_service: 
   __init__(self, data={}, use_api_service=True): 
   is_valid(self, wikipedia_id, get_extra_info=False): 
   normalise(self, id_string, include_prefix=False): 
   syntax_ok(self, id_string): 
   exists(self, wikipedia_id_full, get_extra_info=False, allow_extra_api=None): 
   extra_info(self, api_response, choose_api=None, info_dict={}): 
}

node3              ^-[#595959,plain]-  IdentifierManager 
node8              ^-[#595959,plain]-  IdentifierManager 
node10             ^-[#595959,plain]-  IdentifierManager 
node11             ^-[#595959,plain]-  IdentifierManager 
node0              ^-[#595959,plain]-  IdentifierManager 
node6              ^-[#595959,plain]-  IdentifierManager 
node4              ^-[#595959,plain]-  IdentifierManager 
node2              ^-[#595959,plain]-  IdentifierManager 
node1              ^-[#595959,plain]-  IdentifierManager 
node9              ^-[#595959,plain]-  IdentifierManager 
node5              ^-[#595959,plain]-  IdentifierManager 
@enduml
